
.PHONY: all cleanstage stage install uninstall x11

all: $(EXE)

$(EXE): $(OBJECTS)
	@echo "Making project $(PNAME) version $(VERSION)."
	$(CC) $(LINKEROPTS) $(LDFLAGS) $(OBJECTS) -o $(EXE) $(LIBS)
	@if $(OS_WIN) && test ! -z "$(USE_BUILTIN)" && test $(USE_BUILTIN) -ne 0; then \
		if test -d "$(LIB_PREFIX)/bin"; then \
			for DLL in $$(find "$(LIB_PREFIX)/bin" -type f -name "*.[dD][lL][lL]"); do \
				cp -v "$${DLL}" ./; \
			done; \
		fi; \
		unused_dll=($$(find ./ -maxdepth 1 -type f \( -name "wx*_gl_*.[dD][lL][lL]" -o -name "libgettext*.[dD][lL][lL]" -o -name "libasprintf*.[dD][lL][lL]" \))); \
		for DLL in $${unused_dll[@]}; do \
			rm -vf "$${DLL}"; \
		done; \
	fi;

stage: $(EXE) LICENSE.txt
	@data_dir="$(DESTDIR)$(DATADIR)/myabcs"; \
	mkdir -p "$${data_dir}"; \
	# main executable; \
	install -vm 0755 "${EXE}" "$${data_dir}"; \
	# image data; \
	for DIR in $$(find "data/image/" -type d); do \
		target_dir="$${data_dir}/$${DIR}"; \
		mkdir -p "$${target_dir}"; \
		for IMG in $$(find "$${DIR}" -maxdepth 1 -type f); do \
			install -vm 0644 "$${IMG}" "$${target_dir}"; \
		done; \
	done; \
	# sound data; \
	for DIR in "data/audio" "data/audio/effect" "data/audio/alpha"; do \
		target_dir="$${data_dir}/$${DIR}"; \
		mkdir -p "$${target_dir}"; \
		for SND in $$(find "$${DIR}" -maxdepth 1 -type f -name "*.flac"); do \
			if test ! -z "$(AFORMAT)"; then \
				if test "$(AFORMAT)" == "vorbis" || test "$(AFORMAT)" == "ogg" || test "$(AFORMAT)" == "oga"; then \
					audio_codec="libvorbis"; \
					audio_ext="oga"; \
					audio_bitrate="96k"; \
				elif test "$(AFORMAT)" == "mp3"; then \
					audio_codec="libmp3lame"; \
					audio_ext="mp3"; \
					audio_bitrate="128k"; \
				else \
					echo "Unknown audio format: $(AFORMAT)"; \
					exit 1; \
				fi; \
				audio_target=$${target_dir}/$$(basename $${SND} | sed -e "s|\.flac|\.$${audio_ext}|"); \
				echo "'$${SND}' -> '$${audio_target}'"; \
				err=$$(ffmpeg -hide_banner -y -i "$${SND}" -c:a $${audio_codec} -b:a $${audio_bitrate} -ar 44100 "$${audio_target}" 2>&1 > /dev/null); \
				err_id=$$?; \
				if test $${err_id} -ne 0; then \
					echo -e "\nError converting FLAC to $(AFORMAT) data. Is FFmpeg installed?"; \
					echo -e "\nCommand output:\n$${err}\n"; \
					exit $${err_id}; \
				fi; \
			else \
				install -vm 0644 "$${SND}" "$${target_dir}"; \
			fi; \
		done; \
	done; \
	# doc files; \
	install -vm 0644 "LICENSE.txt" "$${data_dir}"; \
	install -vm 0644 "CHANGES.txt" "$${data_dir}"; \
	for DIR in $$(find "doc/" -type d); do \
		target_dir="$${data_dir}/$${DIR}"; \
		mkdir -p "$${target_dir}"; \
		for DOC in $$(find "$${DIR}" -maxdepth 1 -type f); do \
			install -vm 0644 "$${DOC}" "$${target_dir}"; \
		done; \
	done; \
	# X11 desktop files \
	if $(OS_WIN); then \
		for DLL in $$(find ./ -maxdepth 1 -type f -name "*.[dD][lL][lL]"); do \
			install -vm 0644 "$${DLL}" "$${data_dir}"; \
		done; \
	else \
		echo "Installing X11 files ..."; \
		make install-x11; \
	fi;

pack:
	@zip_dir="$$(pwd)/build"; \
	cd "$(DESTDIR)"; \
	if test "${DEBUG}"; then \
		rel_name+="-debug"; \
	fi; \
	echo -e "\nCreating binary distribution: $(REL_NAME)\n"; \
	rel_file="$${zip_dir}/$(REL_NAME).zip"; \
	if [ -f "$${rel_file}" ]; then \
		rm -vf "$${rel_file}"; \
	fi; \
	zip -r9 "$${rel_file}" ./; \
	echo -e "\nCreated $(REL_NAME).zip binary distribution archive";

$(LOG_O): $(LOG_C) $(LOG_D)
	$(CC) $(CXXFLAGS) $(WXFLAGS) $(CPPFLAGS) $(LOG_C)

$(PATHS_O): $(PATHS_C) $(PATHS_D)
	$(CC) $(CXXFLAGS) $(WXFLAGS) $(CPPFLAGS) $(PATHS_C)

$(RESOBJ_O): $(RESOBJ_C) $(RESOBJ_D)
	$(CC) $(CXXFLAGS) $(WXFLAGS) $(SDLFLAGS) $(CPPFLAGS) $(RESOBJ_C)

$(RESLIST_O): $(RESLIST_C) $(RESLIST_D)
	$(CC) $(CXXFLAGS) $(WXFLAGS) $(CPPFLAGS) $(RESLIST_C)

$(CATEGORY_O): $(CATEGORY_C) $(CATEGORY_D)
	$(CC) $(CXXFLAGS) $(WXFLAGS) $(CPPFLAGS) $(CATEGORY_C)

$(CREDPANEL_O): $(CREDPANEL_C) $(CREDPANEL_D)
	$(CC) $(CXXFLAGS) $(WXFLAGS) $(CPPFLAGS) $(CREDPANEL_C)

$(GNRCABT_O): $(GNRCABT_C) $(GNRCABT_D)
	$(CC) $(CXXFLAGS) $(WXFLAGS) $(SDLFLAGS) $(CPPFLAGS) $(GNRCABT_C)

$(SOUND_O): $(SOUND_C) $(SOUND_D)
	$(CC) $(CXXFLAGS) $(WXFLAGS) $(SDLFLAGS) $(CPPFLAGS) $(SOUND_C)

$(ABC_O): $(ABC_C) $(ABC_D)
	$(CC) $(CXXFLAGS) $(WXFLAGS) $(CPPFLAGS) $(ABC_C)

$(MAIN_O): $(MAIN_C) $(MAIN_D)
	$(CC) $(CXXFLAGS) $(WXFLAGS) $(CPPFLAGS) $(MAIN_C)

$(FONTS_O): $(FONTS_C) $(FONTS_D)
	$(CC) $(CXXFLAGS) $(WXFLAGS) $(CPPFLAGS) $(FONTS_C)

$(EVENT_O): $(EVENT_C) $(EVENT_D)
	$(CC) $(CXXFLAGS) $(WXFLAGS) $(DEFINGS) $(CPPFLAGS) $(EVENT_C)

$(ID_O): $(ID_C) $(ID_D)
	$(CC) $(CXXFLAGS) $(WXFLAGS) $(DEFINGS) $(CPPFLAGS) $(ID_C)

$(WINRESOURCES_O): win_resources.rc
	windres $$(wx-config --cxxflags | sed -e 's|-mthreads||') win_resources.rc $(WINRESOURCES_O)

install-x11: data/resource/x11/myabcs.desktop data/resource/logo/myabcs.svg
	@target_dir="$(DESTDIR)$(PREFIX)"; \
	mkdir -p "$${target_dir}/share/applications" "$${target_dir}/share/pixmaps" "$${target_dir}/bin"; \
	install -vm 0644 "data/resource/x11/myabcs.desktop" "$${target_dir}/share/applications"; \
	install -vm 0644 "data/resource/logo/myabcs.svg" "$${target_dir}/share/pixmaps"; \
	exe="$${target_dir}/bin/myabcs"; \
	echo "Creating executable: $${exe}"; \
	echo -e "#!/bin/sh\n\n$(DATADIR)/myabcs/myabcs" > "$${exe}"; \
	chmod +x "$${exe}";

build-libs:
	@CMD_MAKE=$(MAKE); \
	export CMD_MAKE NO_BUILD_LIBS; \
	if test -z "$(BUILD_LIBS)"; then \
		libraries/build.sh "$(BUILD_STRING)"; \
	else \
    	libraries/build.sh "$(BUILD_STRING)" $(BUILD_LIBS); \
	fi;

install: stage

uninstall:
	@target_dir="$(DESTDIR)$(PREFIX)"; \
	if $(OS_WIN); then \
		data_dir="$${target_dir}/share/myabcs"; \
		rm -vf "$${target_dir}/bin/myabcs" "$${target_dir}/share/pixmaps/myabcs.svg" "$${target_dir}/share/applications/myabcs.desktop"; \
	else \
		data_dir="$${target_dir}/myabcs"; \
	fi; \
	#find "$${data_dir}" -type f -print -delete; \
	#for FILE in $$(find "$${data_dir}" -type f); \
	#do \
	#	echo "$${FILE}"; \
	#done; \
	find "$${data_dir}" -type f -exec rm -vf {} \;; \
	find "$${data_dir}" -type d -empty -delete;

clean:
	rm -rf *.o *.exe $(EXE) *.core *.dll

help:
	@echo -e $(HELP_STRING)
